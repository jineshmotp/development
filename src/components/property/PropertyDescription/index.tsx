import React, { useEffect, useState } from 'react';
import { useController } from 'react-hook-form';
import { ActivityIndicator, Text, TouchableOpacity } from 'react-native';

import Divider from '@/components/common/Divider';
import SectionHoc from '@/components/common/SectionHoc';
import CommonInput from '@/custom/CommonInput';
import RNView from '@/custom/RNView';
import { usePropertyDescriptionMutation } from '@/redux/listing/listingService';
import { ColorTheme } from '@/theme';
import { px } from '@/utils';

import { styles } from '../../../screens/Property/styles';

interface VerificationDetailsProps {
  setDetails?: any;
  details?: any;
  control?: any;
  checkingData?: any;
  controlConstraints?: any;
  errors?: any;
}

const PropertyDescription: React.FC<VerificationDetailsProps> = ({
  control,
  controlConstraints,
  errors,
  checkingData,
  setDetails,
  details,
}) => {
  const [uploadDescriptionMutation] = usePropertyDescriptionMutation({});

  const [loader, setLoader] = useState(false);

  const autogenerateDescription = () => {
    const payloadvalue = `use this template
    { property description}
    {property amenities}
    {Property location description}
    from below keys
    dont respond with heading/ subheading
    Avoid adding owner details to the description
     generate within 100 words
    unit of price is rupees
    
    { ${JSON.stringify(checkingData)} }`;

    // console.log(' response ', payloadvalue);

    setLoader(true);

    uploadDescriptionMutation({
      description: payloadvalue,
    }).then(response => {
      // console.log('response value -------> ', response?.data?.data?.content);
      setDetails({ ...details, property_description: response?.data?.data?.content });
    });
  };

  const { field: propdescriptionField } = useController({
    name: 'property_description',
    control,
    defaultValue: details.property_description,
    rules: controlConstraints.property_description, // Apply constraints for fname
  });

  useEffect(() => {
    propdescriptionField.onChange(details.property_description);

    setLoader(false);
  }, [details.property_description]);

  return (
    <RNView style={styles.container}>
      <SectionHoc title="Property Description" mandatory={true}>
        <TouchableOpacity
          onPress={() => autogenerateDescription()}
          style={{
            alignSelf: 'flex-end',
          }}>
          {loader ? (
            <ActivityIndicator />
          ) : (
            <Text
              style={{
                color: '#7ADAB5',
                fontWeight: '700',
              }}>
              Generate with AI
            </Text>
          )}
        </TouchableOpacity>

        <CommonInput
          label="Property Description"
          errorvalue={errors.property_description}
          placeholder=""
          multiline={true}
          contentStyle={{ textTransform: 'capitalize' }}
          placeholderColor={ColorTheme.gray}
          style={[
            styles.inputStyle,
            { marginBottom: errors.property_description ? -10 : 10, minHeight: 100, height: px(100) },
          ]}
          onChangeText={(e: string) => {
            setDetails({ ...details, property_description: e });
            propdescriptionField.onChange(e);
          }}
          value={propdescriptionField.value}
        />

        {errors.property_description && (
          <Text style={{ color: ColorTheme.red }}>{errors.property_description.message}</Text>
        )}
      </SectionHoc>

      <Divider
        borderColor="#D9D6D6"
        style={{
          marginTop: 10,
          gap: 10,
        }}
      />
    </RNView>
  );
};

export default PropertyDescription;
